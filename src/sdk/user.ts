/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userCreateRahul } from "../funcs/userCreateRahul.js";
import { userCreateUsersWithListInput } from "../funcs/userCreateUsersWithListInput.js";
import { userDeleteUser } from "../funcs/userDeleteUser.js";
import { userGetUserByName } from "../funcs/userGetUserByName.js";
import { userSayNewRandom } from "../funcs/userSayNewRandom.js";
import { userUpdateUser } from "../funcs/userUpdateUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class User extends ClientSDK {
  /**
   * Create rahul
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createRahul(
    request?: components.User | undefined,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(userCreateRahul(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates list of users with given input array
   *
   * @remarks
   * Creates list of users with given input array
   */
  async createUsersWithListInput(
    request?: Array<components.User> | undefined,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(userCreateUsersWithListInput(
      this,
      request,
      options,
    ));
  }

  /**
   * Say new random
   *
   * @remarks
   * Returns a new random message
   */
  async sayNewRandom(
    options?: RequestOptions,
  ): Promise<operations.SayNewRandomResponseBody> {
    return unwrapAsync(userSayNewRandom(
      this,
      options,
    ));
  }

  /**
   * Get user by user name
   */
  async getUserByName(
    request: operations.GetUserByNameRequest,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(userGetUserByName(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateUser(
    request: operations.UpdateUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userUpdateUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async deleteUser(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(userDeleteUser(
      this,
      request,
      options,
    ));
  }
}
