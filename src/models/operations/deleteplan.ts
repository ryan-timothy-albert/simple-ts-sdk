/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePlanRequest = {
  apiKey?: string | undefined;
  /**
   * Plan id to delete
   */
  planId: number;
};

/** @internal */
export const DeletePlanRequest$inboundSchema: z.ZodType<
  DeletePlanRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string().optional(),
  planId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
  });
});

/** @internal */
export type DeletePlanRequest$Outbound = {
  api_key?: string | undefined;
  planId: number;
};

/** @internal */
export const DeletePlanRequest$outboundSchema: z.ZodType<
  DeletePlanRequest$Outbound,
  z.ZodTypeDef,
  DeletePlanRequest
> = z.object({
  apiKey: z.string().optional(),
  planId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePlanRequest$ {
  /** @deprecated use `DeletePlanRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePlanRequest$inboundSchema;
  /** @deprecated use `DeletePlanRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePlanRequest$outboundSchema;
  /** @deprecated use `DeletePlanRequest$Outbound` instead. */
  export type Outbound = DeletePlanRequest$Outbound;
}

export function deletePlanRequestToJSON(
  deletePlanRequest: DeletePlanRequest,
): string {
  return JSON.stringify(
    DeletePlanRequest$outboundSchema.parse(deletePlanRequest),
  );
}

export function deletePlanRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePlanRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePlanRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePlanRequest' from JSON`,
  );
}
