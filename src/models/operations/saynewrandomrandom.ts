/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * successful operation
 */
export type SayNewRandomRandomResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const SayNewRandomRandomResponseBody$inboundSchema: z.ZodType<
  SayNewRandomRandomResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type SayNewRandomRandomResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const SayNewRandomRandomResponseBody$outboundSchema: z.ZodType<
  SayNewRandomRandomResponseBody$Outbound,
  z.ZodTypeDef,
  SayNewRandomRandomResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SayNewRandomRandomResponseBody$ {
  /** @deprecated use `SayNewRandomRandomResponseBody$inboundSchema` instead. */
  export const inboundSchema = SayNewRandomRandomResponseBody$inboundSchema;
  /** @deprecated use `SayNewRandomRandomResponseBody$outboundSchema` instead. */
  export const outboundSchema = SayNewRandomRandomResponseBody$outboundSchema;
  /** @deprecated use `SayNewRandomRandomResponseBody$Outbound` instead. */
  export type Outbound = SayNewRandomRandomResponseBody$Outbound;
}

export function sayNewRandomRandomResponseBodyToJSON(
  sayNewRandomRandomResponseBody: SayNewRandomRandomResponseBody,
): string {
  return JSON.stringify(
    SayNewRandomRandomResponseBody$outboundSchema.parse(
      sayNewRandomRandomResponseBody,
    ),
  );
}

export function sayNewRandomRandomResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SayNewRandomRandomResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SayNewRandomRandomResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SayNewRandomRandomResponseBody' from JSON`,
  );
}
